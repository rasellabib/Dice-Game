.loaderViewPort {
    --BG-COLOR: #000000;
    width: 20rem; /* Background circle around the dice */
    aspect-ratio: 1;
    border-radius: 50%;
    perspective: 1000px;
    display: flex;
    justify-content: center;
    align-items: center;
    border: 4px solid black;
    animation: changeColor 5s ease infinite;
    background-color: var(--BG-COLOR);
    opacity: 1;
    background-image: radial-gradient(#ffffff 1px, transparent 1px),
      radial-gradient(#ffffff 1px, var(--BG-COLOR) 1px);
    background-size: 24px 24px;
  }
  .loader {
    /* Container for the dice*/
    display: flex;
    justify-content: center;
    align-items: center;
    transform: rotateX(90deg);
    transform-style: preserve-3d;
    animation: revolve 5s ease infinite;
  }
  .dot {
    width: 1rem;
    aspect-ratio: 1;
    background-color: black;
    border-radius: 50%;
  }
  .dotContainer {
    /* Flexbox to arrange dots horizontally */
    width: 100%;
    height: 100%;
    display: flex;
    justify-content: space-around;
    align-items: center;
  }
  .subDotContainer {
    /* Flexbox to arrange dots vertically */
    height: 100%;
    display: flex;
    flex-direction: column;
    justify-content: space-around;
  }
  .left .dotContainer {
    transform: rotate(45deg);
  }
  .side {
    /* Actual sides of the dice */
    background-color: rgba(255, 255, 255, 1);
    padding: 1rem;
    position: absolute;
    width: 6em; /* Varying this will vary the Dice's size */
    aspect-ratio: 1;
    display: flex;
    justify-content: center;
    align-items: center;
    border: 4px solid black;
  }
  .front {
    transform: translateZ(3rem);
  }
  .back {
    transform: translateZ(-3rem);
  }
  .back .dotContainer {
    transform: rotate(-45deg);
  }
  .left {
    transform: rotateY(90deg) translateZ(3rem);
  }
  .right {
    transform: rotateY(90deg) translateZ(-3rem);
  }
  .bottom {
    transform: translateY(3rem) rotateX(90deg);
  }
  .top {
    transform: translateY(-3rem) rotateX(90deg);
  }
  @keyframes revolve {
    0% {
      transform: rotate3d(1, 0, 0, 0deg) rotate3d(0, 1, 0, 0deg)
        rotate3d(0, 0, 1, 0deg);
    }
    20% {
      transform: rotate3d(1, 0, 0, 72deg) rotate3d(0, 1, 0, 72deg)
        rotate3d(0, 0, 1, 72deg);
    }
    40% {
      transform: rotate3d(1, 0, 0, 148deg) rotate3d(0, 1, 0, 148deg)
        rotate3d(0, 0, 1, 148deg);
    }
    60% {
      transform: rotate3d(1, 0, 0, 216deg) rotate3d(0, 1, 0, 216deg)
        rotate3d(0, 0, 1, 216deg);
    }
    80% {
      transform: rotate3d(1, 0, 0, 288deg) rotate3d(0, 1, 0, 288deg)
        rotate3d(0, 0, 1, 288deg);
    }
    100% {
      transform: rotate3d(1, 0, 0, 360deg) rotate3d(0, 1, 0, 360deg)
        rotate3d(0, 0, 1, 360deg);
    }
  }
  @keyframes changeColor {
    0% {
      background-color: #000000;
      background-position: 0px, 0px;
    }
    20% {
      background-position: 24px, 24px;
    }
    40% {
      background-position: 36px, 36px;
    }
    60% {
      background-position: 24px, 24px;
    }
    80% {
      background-position: 36px, 36px;
    }
    100% {
      background-position: 24px, 24px;
    }
  }
  

.title {
    font-size: 80px;
    font-weight: bold;
    margin: 20px 0;
}

button {
    position: relative;
    width: 11em;
    height: 4em;
    outline: none;
    transition: 0.1s;
    background-color: transparent;
    border: none;
    font-size: 13px;
    font-weight: bold;
    color: #000000;
    cursor: pointer;
  }
  
  #clip {
    --color: #000000;
    position: absolute;
    top: 0;
    overflow: hidden;
    width: 100%;
    height: 100%;
    border: 5px double var(--color);
    box-shadow: inset 0px 0px 15px #195480;
    -webkit-clip-path: polygon(30% 0%, 70% 0%, 100% 30%, 100% 70%, 70% 100%, 30% 100%, 0% 70%, 0% 30%);
  }
  
  .arrow {
    position: absolute;
    transition: 0.2s;
    background-color: #000000;
    top: 35%;
    width: 11%;
    height: 30%;
  }
  
  #leftArrow {
    left: -13.5%;
    -webkit-clip-path: polygon(100% 0, 100% 100%, 0 50%);
  }
  
  #rightArrow {
    -webkit-clip-path: polygon(100% 49%, 0 0, 0 100%);
    left: 102%;
  }
  
  button:hover #rightArrow {
    background-color: #ffffff;
    left: -15%;
    animation: 0.6s ease-in-out both infinite alternate rightArrow8;
  }
  
  button:hover #leftArrow {
    background-color: #ffffff;
    left: 103%;
    animation: 0.6s ease-in-out both infinite alternate leftArrow8;
  }
  
  .corner {
    position: absolute;
    width: 4em;
    height: 4em;
    background-color: #000000;
    box-shadow: inset 1px 1px 8px #2e2e2e;
    transform: scale(1) rotate(45deg);
    transition: 0.2s;
  }
  
  #rightTop {
    top: -1.98em;
    left: 91%;
  }
  
  #leftTop {
    top: -1.96em;
    left: -3.0em;
  }
  
  #leftBottom {
    top: 2.10em;
    left: -2.15em;
  }
  
  #rightBottom {
    top: 45%;
    left: 88%;
  }
  
  button:hover #leftTop {
    animation: 0.1s ease-in-out 0.05s both changeColor8,
    0.2s linear 0.4s both lightEffect8;
  }
  
  button:hover #rightTop {
    animation: 0.1s ease-in-out 0.15s both changeColor8,
    0.2s linear 0.4s both lightEffect8;
  }
  
  button:hover #rightBottom {
    animation: 0.1s ease-in-out 0.25s both changeColor8,
    0.2s linear 0.4s both lightEffect8;
  }
  
  button:hover #leftBottom {
    animation: 0.1s ease-in-out 0.35s both changeColor8,
    0.2s linear 0.4s both lightEffect8;
  }
  
  button:hover .corner {
    transform: scale(1.25) rotate(45deg);
  }
  
  button:hover #clip {
    animation: 0.2s ease-in-out 0.55s both greenLight8;
    --color: #ffffff;
  }
  
  @keyframes changeColor8 {
    from {
      background-color: #000000;
    }
  
    to {
      background-color: #ffffff;
    }
  }
  
  @keyframes lightEffect8 {
    from {
      box-shadow: 1px 1px 5px #ffffff;
    }
  
    to {
      box-shadow: 0 0 2px #ffffff;
    }
  }
  
  @keyframes greenLight8 {
    from {
    }
  
    to {
      box-shadow: inset 0px 0px 32px #ffffff;
    }
  }
  
  @keyframes leftArrow8 {
    from {
      transform: translate(0px);
    }
  
    to {
      transform: translateX(10px);
    }
  }
  
  @keyframes rightArrow8 {
    from {
      transform: translate(0px);
    }
  
    to {
      transform: translateX(-10px);
    }
  }
  
  
  